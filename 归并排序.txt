#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

void mergeSort(int a[],int len);
void MergeSort(int a[], int left, int right,int temp[]);
void MergeArry(int a[], int left, int mid, int right, int temp[]);

void swap(int *a, int *b)
{
	int c;
	c = *a;
	*a = *b;
	*b = c;

};
int main()
{
	/*vector<int> a{5,6,7,3,9,1,4,6,8,9};
	for (auto iter = a.begin(); iter != a.end(); iter++)
		cout << *iter<<endl;
	int size = a.size();
	cout << size;
	*/
	int a[11] = { 5,6,7,3,9,1,4,6,8,20,17 };
	//sort(a,a+10);
	mergeSort(a, 11);
	for (int i = 0; i < 11; i++)
		cout << a[i];

}

void MergeArry(int a[], int left, int mid, int right, int temp[])
{
	int i = 0, j = left, k = mid + 1;
	while (j <=mid&&k<=right)
	{
		if (a[j] <= a[k])
			temp[i++] = a[j++];
		else
		{
			temp[i++] = a[k++];
		}
	}
	while (j <= mid)
		temp[i++] = a[j++];
	while (k<=right)
	{
		temp[i++] = a[k++];
	}

	for (k = 0; k < i; k++)
	{
		a[left + k] = temp[k];
	}
	
}

void MergeSort(int a[], int left, int right,int temp[])
{
	if (left < right)
	{
		int mid = (left + right) / 2;
		MergeSort(a,left,mid,temp);
		MergeSort(a, mid + 1, right, temp);
		MergeArry(a, left, mid, right, temp);
	}
}
void mergeSort(int a[],int len)
{
	int *temp = new int[len];
	if (temp == NULL)
		return;
	MergeSort(a, 0, len - 1, temp);
	delete[] temp;



}